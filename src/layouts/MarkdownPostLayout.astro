---
import "@/styles/global.css";
import BaseHead from "@/components/BaseHead.astro";
import Navbar from "@/components/Navbar.astro";
import Footer from "@/components/Footer.astro";
import FormattedDate from "@/components/ui/FormattedDate.astro";

const { title, description, image, canonicalURL, frontmatter, slug } =
    Astro.props;
const { tags } = frontmatter as { tags?: string[] };
---

<!doctype html>
<html lang="en" class="light h-full">
    <head>
        <BaseHead
            title={frontmatter.title}
            description={frontmatter.description}
            image={image}
            canonicalURL={canonicalURL}
        />
    </head>
    <body
        class="bg-background text-foreground transition-colors min-h-screen flex flex-col"
    >
        <Navbar />
        <main class="px-4 flex-1 mx-auto w-full max-w-4xl typography">
            <!-- Main Content -->
            <h1 class="mb-2">{frontmatter.title}</h1>
            <div
                class="flex flex-wrap items-center gap-2 text-md text-foreground mb-6"
            >
                <FormattedDate date={frontmatter.pubDate} />
                {
                    tags &&
                        tags.map((tag: string) => (
                            <span class="px-2 py-0.5 bg-muted rounded text-sm font-medium">
                                {tag}
                            </span>
                        ))
                }
            </div>

            <slot />
        </main>

        <Footer />
    </body>
</html>

<style>
    html,
    body {
        margin: 0;
        width: 100%;
        height: 100%;
    }

    /* Prevent flash of unstyled content */
    html:not(.light):not(.dark) {
        visibility: hidden;
    }

    html.light,
    html.dark {
        visibility: visible;
    }
</style>

<script>
    /** Attaches copy buttons to code blocks in the document,
     * allowing users to copy code easily. */
    function attachCopyButtons() {
        const copyButtonLabel = "Copy";
        const codeBlocks = Array.from(document.querySelectorAll("pre"));

        for (const codeBlock of codeBlocks) {
            const wrapper = document.createElement("div");
            wrapper.style.position = "relative";

            // Check if --file-name-offset custom property exists
            const computedStyle = getComputedStyle(codeBlock);
            const hasFileNameOffset =
                computedStyle.getPropertyValue("--file-name-offset").trim() !==
                "";

            // Determine the top positioning class
            const topClass = hasFileNameOffset
                ? "top-(--file-name-offset)"
                : "-top-3";

            const copyButton = document.createElement("button");
            copyButton.className = `copy-code absolute end-3 ${topClass} rounded bg-muted border border-muted px-2 py-1 text-xs leading-4 text-foreground font-medium`;
            copyButton.innerHTML = copyButtonLabel;
            codeBlock.setAttribute("tabindex", "0");
            codeBlock.appendChild(copyButton);

            // wrap codebock with relative parent element
            codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
            wrapper.appendChild(codeBlock);

            copyButton.addEventListener("click", async () => {
                await copyCode(codeBlock, copyButton);
            });
        }

        async function copyCode(block: any, button: any) {
            const code = block.querySelector("code");
            const text = code?.innerText;

            await navigator.clipboard.writeText(text ?? "");

            // visual feedback that task is completed
            button.innerText = "Copied";

            setTimeout(() => {
                button.innerText = copyButtonLabel;
            }, 700);
        }
    }
    attachCopyButtons();
</script>
